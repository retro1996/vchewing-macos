// (c) 2022 and onwards The vChewing Project (MIT-NTL License).
// ====================
// This code is released under the MIT license (SPDX-License-Identifier: MIT)
// ... with NTL restriction stating that:
// No trademark license is granted to use the trade names, trademarks, service
// marks, or product names of Contributor, except as required to fulfill notice
// requirements defined in MIT License.

import XCTest

@testable import Tekkon

extension TekkonTestsKeyboardArrangments {
  func testAlvinLiuKeysMicrosoftCompatible() throws {
    var c = Tekkon.Composer(arrange: .ofAlvinLiu)
    XCTAssertEqual(c.cS2RC("bic"), "ㄅㄧㄝ")
    XCTAssertEqual(c.cS2RC("bicf"), "ㄅㄧㄝˊ")
    XCTAssertEqual(c.cS2RC("bicj"), "ㄅㄧㄝˇ")
    XCTAssertEqual(c.cS2RC("bicl"), "ㄅㄧㄝˋ")
    XCTAssertEqual(c.cS2RC("pic"), "ㄆㄧㄝ")
    XCTAssertEqual(c.cS2RC("picj"), "ㄆㄧㄝˇ")
    XCTAssertEqual(c.cS2RC("picl"), "ㄆㄧㄝˋ")
    XCTAssertEqual(c.cS2RC("mic"), "ㄇㄧㄝ")
    XCTAssertEqual(c.cS2RC("micf"), "ㄇㄧㄝˊ")
    XCTAssertEqual(c.cS2RC("micl"), "ㄇㄧㄝˋ")
    XCTAssertEqual(c.cS2RC("dic"), "ㄉㄧㄝ")
    XCTAssertEqual(c.cS2RC("dicf"), "ㄉㄧㄝˊ")
    XCTAssertEqual(c.cS2RC("dicj"), "ㄉㄧㄝˇ")
    XCTAssertEqual(c.cS2RC("dicl"), "ㄉㄧㄝˋ")
    XCTAssertEqual(c.cS2RC("tic"), "ㄊㄧㄝ")
    XCTAssertEqual(c.cS2RC("ticf"), "ㄊㄧㄝˊ")
    XCTAssertEqual(c.cS2RC("ticj"), "ㄊㄧㄝˇ")
    XCTAssertEqual(c.cS2RC("ticl"), "ㄊㄧㄝˋ")
    XCTAssertEqual(c.cS2RC("nic"), "ㄋㄧㄝ")
    XCTAssertEqual(c.cS2RC("nicf"), "ㄋㄧㄝˊ")
    XCTAssertEqual(c.cS2RC("nicl"), "ㄋㄧㄝˋ")
    XCTAssertEqual(c.cS2RC("nycl"), "ㄋㄩㄝˋ")
    XCTAssertEqual(c.cS2RC("lic"), "ㄌㄧㄝ")
    XCTAssertEqual(c.cS2RC("licf"), "ㄌㄧㄝˊ")
    XCTAssertEqual(c.cS2RC("licj"), "ㄌㄧㄝˇ")
    XCTAssertEqual(c.cS2RC("licl"), "ㄌㄧㄝˋ")
    XCTAssertEqual(c.cS2RC("lyc"), "ㄌㄩㄝ")
    XCTAssertEqual(c.cS2RC("lycj"), "ㄌㄩㄝˇ")
    XCTAssertEqual(c.cS2RC("lycl"), "ㄌㄩㄝˋ")
    XCTAssertEqual(c.cS2RC("jic"), "ㄐㄧㄝ")
    XCTAssertEqual(c.cS2RC("jicf"), "ㄐㄧㄝˊ")
    XCTAssertEqual(c.cS2RC("jicj"), "ㄐㄧㄝˇ")
    XCTAssertEqual(c.cS2RC("jicl"), "ㄐㄧㄝˋ")
    XCTAssertEqual(c.cS2RC("jicd"), "ㄐㄧㄝ˙")
    XCTAssertEqual(c.cS2RC("jyc"), "ㄐㄩㄝ")
    XCTAssertEqual(c.cS2RC("jycf"), "ㄐㄩㄝˊ")
    XCTAssertEqual(c.cS2RC("jycj"), "ㄐㄩㄝˇ")
    XCTAssertEqual(c.cS2RC("jycl"), "ㄐㄩㄝˋ")
    XCTAssertEqual(c.cS2RC("qic"), "ㄑㄧㄝ")
    XCTAssertEqual(c.cS2RC("qicf"), "ㄑㄧㄝˊ")
    XCTAssertEqual(c.cS2RC("qicj"), "ㄑㄧㄝˇ")
    XCTAssertEqual(c.cS2RC("qicl"), "ㄑㄧㄝˋ")
    XCTAssertEqual(c.cS2RC("qyc"), "ㄑㄩㄝ")
    XCTAssertEqual(c.cS2RC("qycf"), "ㄑㄩㄝˊ")
    XCTAssertEqual(c.cS2RC("qycl"), "ㄑㄩㄝˋ")
    XCTAssertEqual(c.cS2RC("xic"), "ㄒㄧㄝ")
    XCTAssertEqual(c.cS2RC("xicf"), "ㄒㄧㄝˊ")
    XCTAssertEqual(c.cS2RC("xicj"), "ㄒㄧㄝˇ")
    XCTAssertEqual(c.cS2RC("xicl"), "ㄒㄧㄝˋ")
    XCTAssertEqual(c.cS2RC("xyc"), "ㄒㄩㄝ")
    XCTAssertEqual(c.cS2RC("xycf"), "ㄒㄩㄝˊ")
    XCTAssertEqual(c.cS2RC("xycj"), "ㄒㄩㄝˇ")
    XCTAssertEqual(c.cS2RC("xycl"), "ㄒㄩㄝˋ")
    // XCTAssertEqual(c.cS2RC("cf"), "ㄝˊ")
    // XCTAssertEqual(c.cS2RC("cj"), "ㄝˇ")
    // XCTAssertEqual(c.cS2RC("cl"), "ㄝˋ")
    // XCTAssertEqual(c.cS2RC("cd"), "ㄝ˙")
    XCTAssertEqual(c.cS2RC("h "), "ㄞ ")
    XCTAssertEqual(c.cS2RC("t "), "ㄦ ")
    XCTAssertEqual(c.cS2RC("tf"), "ㄦˊ")
    XCTAssertEqual(c.cS2RC("tj"), "ㄦˇ")
    XCTAssertEqual(c.cS2RC("tl"), "ㄦˋ")
    XCTAssertEqual(c.cS2RC("td"), "ㄦ˙")
    XCTAssertEqual(c.cS2RC("ic"), "ㄧㄝ")
    XCTAssertEqual(c.cS2RC("icf"), "ㄧㄝˊ")
    XCTAssertEqual(c.cS2RC("icj"), "ㄧㄝˇ")
    XCTAssertEqual(c.cS2RC("icl"), "ㄧㄝˋ")
    XCTAssertEqual(c.cS2RC("icd"), "ㄧㄝ˙")
    XCTAssertEqual(c.cS2RC("yc"), "ㄩㄝ")
    XCTAssertEqual(c.cS2RC("ycj"), "ㄩㄝˇ")
    XCTAssertEqual(c.cS2RC("ycl"), "ㄩㄝˋ")
  }
}
